head	1.1;
branch	1.1.1;
access;
symbols
	asst1-end:1.1.1.1
	asst1-begin:1.1.1.1
	asst0-end:1.1.1.1
	os161-1_11:1.1.1.1
	os161:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2015.09.11.01.49.11;	author xwang26;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2015.09.11.01.49.11;	author xwang26;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@<html>
<head>
<title>err</title>
<body bgcolor=#ffffff>
<h2 align=center>err</h2>
<h4 align=center>OS/161 Reference Manual</h4>

<h3>Name</h3>
err - print error messages

<h3>Library</h3>
Standard C Library (libc, -lc)

<h3>Synopsis</h3>
#include &lt;err.h&gt;<br>
<br>
void<br>
err(int <em>exitcode</em>, const char *<em>format</em>, ...);<br>
<br>
void<br>
errx(int <em>exitcode</em>, const char *<em>format</em>, ...);<br>
<br>
void<br>
verr(int <em>exitcode</em>, const char *<em>format</em>, va_list);<br>
<br>
void<br>
verrx(int <em>exitcode</em>, const char *<em>format</em>, va_list);<br>

<h3>Description</h3>

The err, errx, verr, and verrx functions print error messages to
the standard error stream.
<p>

errx prints the name of the program, a colon, the text generated by
passing <em>format</em> and subsequent args through
<A HREF=printf.html>printf</A>, and a newline. Then,
<A HREF=exit.html>exit</A> is called and passed the supplied 
<em>exitcode</em>.
<p>

err does the same thing, except that a colon and the error string
for the current error (obtained by calling 
<A HREF=strerror.html>strerror</A> on 
<A HREF=../syscall/errno.html>errno</A>) are printed prior to the
newline.
<p>

verrx and verr are the same as errx and err respectively, except
that the additional arguments for printf are taken to have been
already packaged up in a va_list by use of the
<A HREF=stdarg.html>stdarg</A> facility.
<p>

<h3>See Also</h3>

<A HREF=warn.html>warn</A>

</body>
</html>
@


1.1.1.1
log
@Import of os161
@
text
@@
